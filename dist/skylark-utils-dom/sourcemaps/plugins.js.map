{"version":3,"sources":["plugins.js"],"names":["define","dom","langx","noder","datax","eventer","finder","geom","styler","fx","$","elmx","slice","Array","prototype","pluginKlasses","concat","shortcuts","instantiate","elm","pluginName","options","pluginInstance","data","Error","destroy","removeData","undefined","reset","pluginKlass","Plugin","Evented","inherit","klassName","_construct","this","_elm","_initOptions","ctor","constructor","cache","defaults","ctors","unshift","superclass","i","length","hasOwnProperty","mixin","Object","defineProperty","value","_destroy","noop","_delay","handler","delay","instance","setTimeout","apply","arguments","option","key","parts","curOption","split","shift","pop","_setOptions","_setOption","plugins","fn","plugin","name","args","call","self","returnValue","each","partial","domNode","register","shortcutName","extfn","shortcut","methodName","isFunction","charAt","shortcutter","ret"],"mappings":"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","file":"../plugins.js","sourcesContent":["define([\r\n    \"./dom\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./eventer\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./styler\",\r\n    \"./fx\",\r\n    \"./query\",\r\n    \"./elmx\"\r\n], function(dom, langx, noder, datax, eventer, finder, geom, styler, fx, $, elmx) {\r\n    \"use strict\";\r\n\r\n    var slice = Array.prototype.slice,\r\n        concat = Array.prototype.concat,\r\n        pluginKlasses = {},\r\n        shortcuts = {};\r\n\r\n    /*\r\n     * Create or get or destory a plugin instance assocated with the element.\r\n     */\r\n    function instantiate(elm,pluginName,options) {\r\n        var pluginInstance = datax.data( elm, pluginName );\r\n\r\n        if (options === \"instance\") {\r\n            return pluginInstance;\r\n        } else if (options === \"destroy\") {\r\n            if (!pluginInstance) {\r\n                throw new Error (\"The plugin instance is not existed\");\r\n            }\r\n            pluginInstance.destroy();\r\n            datax.removeData( elm, pluginName);\r\n            pluginInstance = undefined;\r\n        } else {\r\n            if (!pluginInstance) {\r\n                if (options !== undefined && typeof options !== \"object\") {\r\n                    throw new Error (\"The options must be a plain object\");\r\n                }\r\n                var pluginKlass = pluginKlasses[pluginName]; \r\n                pluginInstance = new pluginKlass(elm,options);\r\n                datax.data( elm, pluginName,pluginInstance );\r\n            } else if (options) {\r\n                pluginInstance.reset(options);\r\n            }\r\n        }\r\n\r\n        return pluginInstance;\r\n    }\r\n\r\n    function shortcutter(pluginName,extfn) {\r\n       /*\r\n        * Create or get or destory a plugin instance assocated with the element,\r\n        * and also you can execute the plugin method directory;\r\n        */\r\n        return function (elm,options) {\r\n            var  plugin = instantiate(elm, pluginName,\"instance\");\r\n            if ( options === \"instance\" ) {\r\n              return plugin || null;\r\n            }\r\n            if (!plugin) {\r\n                plugin = instantiate(elm, pluginName,typeof options == 'object' && options || {});\r\n            }\r\n\r\n            if (options) {\r\n                var args = slice.call(arguments,1);\r\n                if (extfn) {\r\n                    return extfn.apply(plugin,args);\r\n                } else {\r\n                    if (typeof options == 'string') {\r\n                        var methodName = options;\r\n\r\n                        if ( !plugin ) {\r\n                            throw new Error( \"cannot call methods on \" + pluginName +\r\n                                \" prior to initialization; \" +\r\n                                \"attempted to call method '\" + methodName + \"'\" );\r\n                        }\r\n\r\n                        if ( !langx.isFunction( plugin[ methodName ] ) || methodName.charAt( 0 ) === \"_\" ) {\r\n                            throw new Error( \"no such method '\" + methodName + \"' for \" + pluginName +\r\n                                \" plugin instance\" );\r\n                        }\r\n\r\n                        plugin[methodName].apply(plugin,args);\r\n                    }                \r\n                }                \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Register a plugin type\r\n     */\r\n    function register( pluginKlass,shortcutName,extfn) {\r\n        var pluginName = pluginKlass.prototype.pluginName;\r\n        \r\n        pluginKlasses[pluginName] = pluginKlass;\r\n\r\n        if (shortcutName) {\r\n            var shortcut = shortcuts[shortcutName] = shortcutter(pluginName,extfn);\r\n                \r\n            $.fn[shortcutName] = function(options) {\r\n                var returnValue = this;\r\n\r\n                if ( !this.length && options === \"instance\" ) {\r\n                  returnValue = undefined;\r\n                } else {\r\n                  this.each(function () {\r\n                    var  ret  = shortcut(this,options);\r\n                    if (ret !== undefined) {\r\n                        returnValue = ret;\r\n                        return false;\r\n                    }\r\n                  });\r\n                }\r\n\r\n                return returnValue;\r\n            };\r\n\r\n            elmx.partial(shortcutName,function(options) {\r\n                var  ret  = shortcut(this._elm,options);\r\n                if (ret === undefined) {\r\n                    ret = this;\r\n                }\r\n                return ret;\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n \r\n    var Plugin =   langx.Evented.inherit({\r\n        klassName: \"Plugin\",\r\n\r\n        _construct : function(elm,options) {\r\n           this._elm = elm;\r\n           this._initOptions(options);\r\n        },\r\n\r\n        _initOptions : function(options) {\r\n          var ctor = this.constructor,\r\n              cache = ctor.cache = ctor.cache || {},\r\n              defaults = cache.defaults;\r\n          if (!defaults) {\r\n            var  ctors = [];\r\n            do {\r\n              ctors.unshift(ctor);\r\n              if (ctor === Plugin) {\r\n                break;\r\n              }\r\n              ctor = ctor.superclass;\r\n            } while (ctor);\r\n\r\n            defaults = cache.defaults = {};\r\n            for (var i=0;i<ctors.length;i++) {\r\n              ctor = ctors[i];\r\n              if (ctor.prototype.hasOwnProperty(\"options\")) {\r\n                langx.mixin(defaults,ctor.prototype.options);\r\n              }\r\n              if (ctor.hasOwnProperty(\"options\")) {\r\n                langx.mixin(defaults,ctor.options);\r\n              }\r\n            }\r\n          }\r\n          Object.defineProperty(this,\"options\",{\r\n            value :langx.mixin({},defaults,options)\r\n          });\r\n\r\n          //return this.options = langx.mixin({},defaults,options);\r\n          return this.options;\r\n        },\r\n\r\n\r\n        destroy: function() {\r\n            var that = this;\r\n\r\n            this._destroy();\r\n            // We can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            datax.removeData(this._elm,this.pluginName );\r\n        },\r\n\r\n        _destroy: langx.noop,\r\n\r\n        _delay: function( handler, delay ) {\r\n            function handlerProxy() {\r\n                return ( typeof handler === \"string\" ? instance[ handler ] : handler )\r\n                    .apply( instance, arguments );\r\n            }\r\n            var instance = this;\r\n            return setTimeout( handlerProxy, delay || 0 );\r\n        },\r\n\r\n        option: function( key, value ) {\r\n            var options = key;\r\n            var parts;\r\n            var curOption;\r\n            var i;\r\n\r\n            if ( arguments.length === 0 ) {\r\n\r\n                // Don't return a reference to the internal hash\r\n                return langx.mixin( {}, this.options );\r\n            }\r\n\r\n            if ( typeof key === \"string\" ) {\r\n\r\n                // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\r\n                options = {};\r\n                parts = key.split( \".\" );\r\n                key = parts.shift();\r\n                if ( parts.length ) {\r\n                    curOption = options[ key ] = langx.mixin( {}, this.options[ key ] );\r\n                    for ( i = 0; i < parts.length - 1; i++ ) {\r\n                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\r\n                        curOption = curOption[ parts[ i ] ];\r\n                    }\r\n                    key = parts.pop();\r\n                    if ( arguments.length === 1 ) {\r\n                        return curOption[ key ] === undefined ? null : curOption[ key ];\r\n                    }\r\n                    curOption[ key ] = value;\r\n                } else {\r\n                    if ( arguments.length === 1 ) {\r\n                        return this.options[ key ] === undefined ? null : this.options[ key ];\r\n                    }\r\n                    options[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._setOptions( options );\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOptions: function( options ) {\r\n            var key;\r\n\r\n            for ( key in options ) {\r\n                this._setOption( key, options[ key ] );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOption: function( key, value ) {\r\n\r\n            this.options[ key ] = value;\r\n\r\n            return this;\r\n        }\r\n\r\n    });\r\n\r\n    $.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n    elmx.partial(\"plugin\",function(name,options) {\r\n        var args = slice.call( arguments, 1 );\r\n        return instantiate.apply(this,[this.domNode,name].concat(args));\r\n    }); \r\n\r\n\r\n    function plugins() {\r\n        return plugins;\r\n    }\r\n     \r\n    langx.mixin(plugins, {\r\n        instantiate,\r\n        Plugin,\r\n        register,\r\n        shortcuts\r\n    });\r\n\r\n    return plugins;\r\n});"]}