{"version":3,"sources":["plugins.js"],"names":["define","dom","langx","noder","datax","eventer","finder","geom","styler","fx","$","elmx","register","pluginKlass","shortcut","name","prototype","pluginName","pluginKlasses","partial","fn","options","args","slice","call","arguments","unshift","this","plugin","apply","instantiate","elm","pluginInstance","data","isMethodCall","returnValue","methodName","isFunction","charAt","error","length","mixin","concat","option","plugins","Array","pluginUuid","Plugin","Evented","inherit","klassName","pluginEventPrefix","create","_construct","element","defaultElement","_elm","uuid","eventNamespace","bindings","classesElementLookup","_on","remove","event","target","destroy","document","style","ownerDocument","window","defaultView","parentWindow","_initOptions","_create","_trigger","_getCreateEventData","_init","ctor","constructor","cache","defaults","ctors","superclass","i","hasOwnProperty","noop","_destroy","off","removeData","removeAttr","_delay","handler","delay","handlerProxy","instance","setTimeout","key","value","parts","curOption","split","shift","pop","undefined","_setOptions","_setOption","self","each"],"mappings":"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","file":"../plugins.js","sourcesContent":["define([\r\n    \"./dom\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./eventer\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./styler\",\r\n    \"./fx\",\r\n    \"./query\",\r\n    \"./elmx\"\r\n], function(dom, langx, noder, datax, eventer, finder, geom, styler, fx, $, elmx) {\r\n    \"use strict\";\r\n\r\n\tvar slice = Array.prototype.slice,\r\n        concat = Array.prototype.concat,\r\n        pluginKlasses = {};\r\n\r\n\r\n    /*\r\n     * Register a plugin type\r\n     */\r\n    function register( pluginKlass,shortcut) {\r\n        var name = pluginKlass.prototype.pluginName;\r\n        \r\n        pluginKlasses[name] = pluginKlass;\r\n\r\n        if (shortcut) {\r\n            elmx.partial(shortcut,$.fn[shortcut] = function(options) {\r\n                var args = slice.call(arguments,0);\r\n                args.unshift(name);\r\n                return this.plugin.apply(this,args);\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Create or get a plugin instance assocated with the element,\r\n     * also you can execute the plugin method directory;\r\n     */\r\n    function instantiate(elm,pluginName,options) {\r\n\r\n        var pluginInstance = datax.data( elm, pluginName );\r\n\r\n        if (options === \"instance\") {\r\n            return pluginInstance;\r\n        }\r\n\r\n        var isMethodCall = typeof options === \"string\",\r\n            args = slice.call( arguments, 2 ),\r\n            returnValue = this;\r\n\r\n        if ( isMethodCall ) {\r\n            var methodName = options;\r\n\r\n            if ( !pluginInstance ) {\r\n                return langx.error( \"cannot call methods on \" + pluginName +\r\n                    \" prior to initialization; \" +\r\n                    \"attempted to call method '\" + methodName + \"'\" );\r\n            }\r\n\r\n            if ( !langx.isFunction( pluginInstance[ methodName ] ) || methodName.charAt( 0 ) === \"_\" ) {\r\n                return langx.error( \"no such method '\" + methodName + \"' for \" + pluginName +\r\n                    \" plugin instance\" );\r\n            }\r\n\r\n            return pluginInstance[ methodName ].apply( pluginInstance, args );\r\n\r\n        } else {\r\n            // Allow multiple hashes to be passed on init\r\n            if ( args.length ) {\r\n                options = langx.mixin.apply( langx, [{},options ].concat( args ) );\r\n            }\r\n\r\n            if ( pluginInstance ) {\r\n                pluginInstance.option( options || {} );\r\n            } else {\r\n                var pluginKlass = pluginKlasses[pluginName]; \r\n                datax.data( elm, pluginName, new pluginKlass( options, elm ) );\r\n            }\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    var pluginUuid = 0;\r\n    var Plugin =   langx.Evented.inherit({\r\n        klassName: \"Plugin\",\r\n\r\n        pluginEventPrefix: \"\",\r\n\r\n        options: {\r\n            // Callbacks\r\n            create: null\r\n        },\r\n\r\n        _construct : function(options,element) {\r\n            //this.options = langx.mixin( {}, this.options );\r\n\r\n            element = $( element || this.defaultElement || this )[ 0 ];\r\n            this._elm = element;\r\n            \r\n            this.element = $( element );\r\n            this.uuid = pluginUuid++;\r\n            this.eventNamespace = \".\" + this.pluginName + this.uuid;\r\n\r\n            this.bindings = $();\r\n            this.classesElementLookup = {};\r\n\r\n            if ( element !== this ) {\r\n                datax.data( element, this.pluginName, this );\r\n                this._on( true, this.element, {\r\n                    remove: function( event ) {\r\n                        if ( event.target === element ) {\r\n                            this.destroy();\r\n                        }\r\n                    }\r\n                } );\r\n                this.document = $( element.style ?\r\n\r\n                    // Element within the document\r\n                    element.ownerDocument :\r\n\r\n                    // Element is window or document\r\n                    element.document || element );\r\n                this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );\r\n            }\r\n\r\n//            this.options = langx.mixin( {},\r\n//                this.options,\r\n//                this._getCreateOptions(),\r\n//                options );\r\n            this._initOptions(options);\r\n\r\n            this._create();\r\n\r\n            this._trigger( \"create\", null, this._getCreateEventData() );\r\n\r\n            this._init();\r\n        },\r\n\r\n        _initOptions : function(options) {\r\n          var ctor = this.constructor,\r\n              cache = ctor.cache = ctor.cache || {},\r\n              defaults = cache.defaults;\r\n          if (!defaults) {\r\n            var  ctors = [];\r\n            do {\r\n              ctors.unshift(ctor);\r\n              if (ctor === Plugin) {\r\n                break;\r\n              }\r\n              ctor = ctor.superclass;\r\n            } while (ctor);\r\n\r\n            defaults = cache.defaults = {};\r\n            for (var i=0;i<ctors.length;i++) {\r\n              ctor = ctors[i];\r\n              if (ctor.prototype.hasOwnProperty(\"options\")) {\r\n                langx.mixin(defaults,ctor.prototype.options);\r\n              }\r\n            }\r\n          }\r\n          return this.options = langx.mixin(defaults,options);\r\n        },\r\n\r\n//        _getCreateOptions: function() {\r\n//            return {};\r\n//        },\r\n\r\n        _getCreateEventData: langx.noop,\r\n\r\n        _create: langx.noop,\r\n\r\n        _init: langx.noop,\r\n\r\n        destroy: function() {\r\n            var that = this;\r\n\r\n            this._destroy();\r\n            // We can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            this.element\r\n                .off( this.eventNamespace )\r\n                .removeData( this.pluginName );\r\n            this.plugin()\r\n                .off( this.eventNamespace )\r\n                .removeAttr( \"aria-disabled\" );\r\n\r\n            // Clean up events and states\r\n            this.bindings.off( this.eventNamespace );\r\n        },\r\n\r\n        _destroy: langx.noop,\r\n\r\n        _delay: function( handler, delay ) {\r\n            function handlerProxy() {\r\n                return ( typeof handler === \"string\" ? instance[ handler ] : handler )\r\n                    .apply( instance, arguments );\r\n            }\r\n            var instance = this;\r\n            return setTimeout( handlerProxy, delay || 0 );\r\n        },\r\n\r\n        option: function( key, value ) {\r\n            var options = key;\r\n            var parts;\r\n            var curOption;\r\n            var i;\r\n\r\n            if ( arguments.length === 0 ) {\r\n\r\n                // Don't return a reference to the internal hash\r\n                return langx.mixin( {}, this.options );\r\n            }\r\n\r\n            if ( typeof key === \"string\" ) {\r\n\r\n                // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\r\n                options = {};\r\n                parts = key.split( \".\" );\r\n                key = parts.shift();\r\n                if ( parts.length ) {\r\n                    curOption = options[ key ] = langx.mixin( {}, this.options[ key ] );\r\n                    for ( i = 0; i < parts.length - 1; i++ ) {\r\n                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\r\n                        curOption = curOption[ parts[ i ] ];\r\n                    }\r\n                    key = parts.pop();\r\n                    if ( arguments.length === 1 ) {\r\n                        return curOption[ key ] === undefined ? null : curOption[ key ];\r\n                    }\r\n                    curOption[ key ] = value;\r\n                } else {\r\n                    if ( arguments.length === 1 ) {\r\n                        return this.options[ key ] === undefined ? null : this.options[ key ];\r\n                    }\r\n                    options[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._setOptions( options );\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOptions: function( options ) {\r\n            var key;\r\n\r\n            for ( key in options ) {\r\n                this._setOption( key, options[ key ] );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOption: function( key, value ) {\r\n\r\n            this.options[ key ] = value;\r\n\r\n            return this;\r\n        },\r\n\r\n    });\r\n\r\n    $.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n    elmx.partial(\"plugin\",function(name,options) {\r\n        var args = slice.call( arguments, 1 );\r\n        return instantiate.apply(this,[this,name].concat(args));\r\n    }); \r\n\r\n\r\n    function plugins() {\r\n        return plugins;\r\n    }\r\n     \r\n    langx.mixin(plugins, {\r\n        instantiate : instantiate,\r\n    \t\r\n        Plugin : Plugin,\r\n\r\n        register : register\r\n\r\n    });\r\n\r\n    return plugins;\r\n});"]}