{"version":3,"sources":["plugins.js"],"names":["define","skylark","klass","langx","noder","datax","eventer","finder","geom","styler","fx","$","velm","register","name","pluginKlass","shortcut","pluginKlasses","partial","fn","options","this","plugin","apply","concat","arguments","instantiate","elm","pluginName","pluginInstance","data","undefined","isMethodCall","args","slice","call","returnValue","methodName","isFunction","charAt","error","length","mixin","option","plugins","Array","prototype","pluginUuid","Plugin","Evented","inherit","klassName","pluginEventPrefix","create","_construct","element","defaultElement","uuid","eventNamespace","bindings","pluginFullName","_on","remove","event","target","destroy","document","style","ownerDocument","window","defaultView","parentWindow","_getCreateOptions","_create","_trigger","_getCreateEventData","_init","noop","_destroy","off","removeData","removeAttr","key","value","parts","curOption","i","split","shift","pop","_setOptions","_setOption","self","each"],"mappings":"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","file":"../plugins.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/klass\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./eventer\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./styler\",\r\n    \"./fx\",\r\n    \"./query\",\r\n    \"./velm\"\r\n], function(skylark, klass, langx, noder, datax, eventer, finder, geom, styler, fx, $, velm) {\r\n    \"use strict\";\r\n\r\n\tvar slice = Array.prototype.slice,\r\n        pluginKlasses = {};\r\n\r\n\r\n    /*\r\n     * Register a plugin type\r\n     */\r\n    function register( name, pluginKlass,shortcut) {\r\n        pluginKlasses[name] = pluginKlass;\r\n\r\n        if (shortcut) {\r\n            velm.partial(shortcut,$.fn[shortcut] = function(options) {\r\n                return this.plugin.apply(this,[name].concat(arguments));\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Create or get a plugin instance assocated with the element,\r\n     * also you can execute the plugin method directory;\r\n     */\r\n    function instantiate(elm,pluginName,options) {\r\n\r\n        var pluginInstance = datax.data( elm, pluginName );\r\n\r\n        if (options === undefined || options === \"instance\") {\r\n            return pluginInstance;\r\n        }\r\n\r\n        var isMethodCall = typeof options === \"string\",\r\n            args = slice.call( arguments, 2 ),\r\n            returnValue = this;\r\n\r\n        if ( isMethodCall ) {\r\n            var methodName = options;\r\n\r\n            if ( !pluginInstance ) {\r\n                return langx.error( \"cannot call methods on \" + pluginName +\r\n                    \" prior to initialization; \" +\r\n                    \"attempted to call method '\" + methodName + \"'\" );\r\n            }\r\n\r\n            if ( !langx.isFunction( pluginInstance[ methodName ] ) || methodName.charAt( 0 ) === \"_\" ) {\r\n                return langx.error( \"no such method '\" + methodName + \"' for \" + pluginName +\r\n                    \" plugin instance\" );\r\n            }\r\n\r\n            return pluginInstance[ methodName ].apply( pluginInstance, args );\r\n\r\n        } else {\r\n            // Allow multiple hashes to be passed on init\r\n            if ( args.length ) {\r\n                options = langx.mixin.apply( langx, [{},options ].concat( args ) );\r\n            }\r\n\r\n            if ( pluginInstance ) {\r\n                pluginInstance.option( options || {} );\r\n            } else {\r\n                var pluginKlass = pluginKlasses[pluginName]; \r\n                datax.data( elm, pluginName, new pluginKlass( options, elm ) );\r\n            }\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    var pluginUuid = 0;\r\n    var Plugin =   langx.Evented.inherit({\r\n        klassName: \"Plugin\",\r\n\r\n        pluginEventPrefix: \"\",\r\n\r\n        options: {\r\n            // Callbacks\r\n            create: null\r\n        },\r\n\r\n        _construct : function(options,element) {\r\n            this.options = langx.mixin( {}, this.options );\r\n\r\n            element = $( element || this.defaultElement || this )[ 0 ];\r\n            this.element = $( element );\r\n            this.uuid = pluginUuid++;\r\n            this.eventNamespace = \".\" + this.pluginName + this.uuid;\r\n\r\n            this.bindings = $();\r\n\r\n            if ( element !== this ) {\r\n                datax.data( element, this.pluginFullName, this );\r\n                this._on( true, this.element, {\r\n                    remove: function( event ) {\r\n                        if ( event.target === element ) {\r\n                            this.destroy();\r\n                        }\r\n                    }\r\n                } );\r\n                this.document = $( element.style ?\r\n\r\n                    // Element within the document\r\n                    element.ownerDocument :\r\n\r\n                    // Element is window or document\r\n                    element.document || element );\r\n                this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );\r\n            }\r\n\r\n            this.options = langx.mixin( {},\r\n                this.options,\r\n                this._getCreateOptions(),\r\n                options );\r\n\r\n            this._create();\r\n\r\n            this._trigger( \"create\", null, this._getCreateEventData() );\r\n\r\n            this._init();\r\n        },\r\n\r\n        _getCreateOptions: function() {\r\n            return {};\r\n        },\r\n\r\n        _getCreateEventData: langx.noop,\r\n\r\n        _create: langx.noop,\r\n\r\n        _init: langx.noop,\r\n\r\n        destroy: function() {\r\n            var that = this;\r\n\r\n            this._destroy();\r\n            // We can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            this.element\r\n                .off( this.eventNamespace )\r\n                .removeData( this.pluginFullName );\r\n            this.plugin()\r\n                .off( this.eventNamespace )\r\n                .removeAttr( \"aria-disabled\" );\r\n\r\n            // Clean up events and states\r\n            this.bindings.off( this.eventNamespace );\r\n        },\r\n\r\n        _destroy: langx.noop,\r\n\r\n        option: function( key, value ) {\r\n            var options = key;\r\n            var parts;\r\n            var curOption;\r\n            var i;\r\n\r\n            if ( arguments.length === 0 ) {\r\n\r\n                // Don't return a reference to the internal hash\r\n                return langx.mixin( {}, this.options );\r\n            }\r\n\r\n            if ( typeof key === \"string\" ) {\r\n\r\n                // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\r\n                options = {};\r\n                parts = key.split( \".\" );\r\n                key = parts.shift();\r\n                if ( parts.length ) {\r\n                    curOption = options[ key ] = langx.mixin( {}, this.options[ key ] );\r\n                    for ( i = 0; i < parts.length - 1; i++ ) {\r\n                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\r\n                        curOption = curOption[ parts[ i ] ];\r\n                    }\r\n                    key = parts.pop();\r\n                    if ( arguments.length === 1 ) {\r\n                        return curOption[ key ] === undefined ? null : curOption[ key ];\r\n                    }\r\n                    curOption[ key ] = value;\r\n                } else {\r\n                    if ( arguments.length === 1 ) {\r\n                        return this.options[ key ] === undefined ? null : this.options[ key ];\r\n                    }\r\n                    options[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._setOptions( options );\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOptions: function( options ) {\r\n            var key;\r\n\r\n            for ( key in options ) {\r\n                this._setOption( key, options[ key ] );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOption: function( key, value ) {\r\n\r\n            this.options[ key ] = value;\r\n\r\n            return this;\r\n        },\r\n\r\n    });\r\n\r\n    $.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n    velm.partial(\"plugin\",function(name,options) {\r\n        var args = slice.call( arguments, 1 );\r\n        return instantiate.apply(this,[this,name].concat(args));\r\n    }); \r\n\r\n\r\n    function plugins() {\r\n        return plugins;\r\n    }\r\n     \r\n    langx.mixin(plugins, {\r\n        instantiate : instantiate,\r\n    \t\r\n        Plugin : Plugin,\r\n\r\n        register : register\r\n\r\n    });\r\n\r\n    return plugins;\r\n});"]}