{"version":3,"sources":["plugins.js"],"names":["define","dom","langx","noder","datax","eventer","finder","geom","styler","fx","$","elmx","register","pluginKlass","shortcut","name","prototype","pluginName","pluginKlasses","partial","fn","options","args","slice","call","arguments","unshift","this","plugin","apply","instantiate","elm","pluginInstance","data","isMethodCall","returnValue","methodName","isFunction","charAt","error","length","mixin","concat","option","plugins","Array","Plugin","Evented","inherit","klassName","_construct","_elm","_initOptions","ctor","constructor","cache","defaults","ctors","superclass","i","hasOwnProperty","destroy","_destroy","removeData","noop","_delay","handler","delay","handlerProxy","instance","setTimeout","key","value","parts","curOption","split","shift","pop","undefined","_setOptions","_setOption","self","each"],"mappings":"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","file":"../plugins.js","sourcesContent":["define([\r\n    \"./dom\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./eventer\",\r\n    \"./finder\",\r\n    \"./geom\",\r\n    \"./styler\",\r\n    \"./fx\",\r\n    \"./query\",\r\n    \"./elmx\"\r\n], function(dom, langx, noder, datax, eventer, finder, geom, styler, fx, $, elmx) {\r\n    \"use strict\";\r\n\r\n\tvar slice = Array.prototype.slice,\r\n        concat = Array.prototype.concat,\r\n        pluginKlasses = {};\r\n\r\n\r\n    /*\r\n     * Register a plugin type\r\n     */\r\n    function register( pluginKlass,shortcut) {\r\n        var name = pluginKlass.prototype.pluginName;\r\n        \r\n        pluginKlasses[name] = pluginKlass;\r\n\r\n        if (shortcut) {\r\n            elmx.partial(shortcut,$.fn[shortcut] = function(options) {\r\n                var args = slice.call(arguments,0);\r\n                args.unshift(name);\r\n                return this.plugin.apply(this,args);\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Create or get a plugin instance assocated with the element,\r\n     * also you can execute the plugin method directory;\r\n     */\r\n    function instantiate(elm,pluginName,options) {\r\n\r\n        var pluginInstance = datax.data( elm, pluginName );\r\n\r\n        if (options === \"instance\") {\r\n            return pluginInstance;\r\n        }\r\n\r\n        var isMethodCall = typeof options === \"string\",\r\n            args = slice.call( arguments, 2 ),\r\n            returnValue = this;\r\n\r\n        if ( isMethodCall ) {\r\n            var methodName = options;\r\n\r\n            if ( !pluginInstance ) {\r\n                return langx.error( \"cannot call methods on \" + pluginName +\r\n                    \" prior to initialization; \" +\r\n                    \"attempted to call method '\" + methodName + \"'\" );\r\n            }\r\n\r\n            if ( !langx.isFunction( pluginInstance[ methodName ] ) || methodName.charAt( 0 ) === \"_\" ) {\r\n                return langx.error( \"no such method '\" + methodName + \"' for \" + pluginName +\r\n                    \" plugin instance\" );\r\n            }\r\n\r\n            return pluginInstance[ methodName ].apply( pluginInstance, args );\r\n\r\n        } else {\r\n            // Allow multiple hashes to be passed on init\r\n            if ( args.length ) {\r\n                options = langx.mixin.apply( langx, [{},options ].concat( args ) );\r\n            }\r\n\r\n            if ( pluginInstance ) {\r\n                pluginInstance.option( options || {} );\r\n            } else {\r\n                var pluginKlass = pluginKlasses[pluginName]; \r\n                datax.data( elm, pluginName, new pluginKlass(elm,options));\r\n            }\r\n        }\r\n\r\n        return returnValue;\r\n    }\r\n\r\n    var Plugin =   langx.Evented.inherit({\r\n        klassName: \"Plugin\",\r\n\r\n        _construct : function(elm,options) {\r\n           this._elm = elm;\r\n           this._initOptions(options);\r\n        },\r\n\r\n        _initOptions : function(options) {\r\n          var ctor = this.constructor,\r\n              cache = ctor.cache = ctor.cache || {},\r\n              defaults = cache.defaults;\r\n          if (!defaults) {\r\n            var  ctors = [];\r\n            do {\r\n              ctors.unshift(ctor);\r\n              if (ctor === Plugin) {\r\n                break;\r\n              }\r\n              ctor = ctor.superclass;\r\n            } while (ctor);\r\n\r\n            defaults = cache.defaults = {};\r\n            for (var i=0;i<ctors.length;i++) {\r\n              ctor = ctors[i];\r\n              if (ctor.prototype.hasOwnProperty(\"options\")) {\r\n                langx.mixin(defaults,ctor.prototype.options);\r\n              }\r\n            }\r\n          }\r\n          return this.options = langx.mixin(defaults,options);\r\n        },\r\n\r\n\r\n        destroy: function() {\r\n            var that = this;\r\n\r\n            this._destroy();\r\n            // We can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            datax.removeData(this._elm,this.pluginName );\r\n        },\r\n\r\n        _destroy: langx.noop,\r\n\r\n        _delay: function( handler, delay ) {\r\n            function handlerProxy() {\r\n                return ( typeof handler === \"string\" ? instance[ handler ] : handler )\r\n                    .apply( instance, arguments );\r\n            }\r\n            var instance = this;\r\n            return setTimeout( handlerProxy, delay || 0 );\r\n        },\r\n\r\n        option: function( key, value ) {\r\n            var options = key;\r\n            var parts;\r\n            var curOption;\r\n            var i;\r\n\r\n            if ( arguments.length === 0 ) {\r\n\r\n                // Don't return a reference to the internal hash\r\n                return langx.mixin( {}, this.options );\r\n            }\r\n\r\n            if ( typeof key === \"string\" ) {\r\n\r\n                // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\r\n                options = {};\r\n                parts = key.split( \".\" );\r\n                key = parts.shift();\r\n                if ( parts.length ) {\r\n                    curOption = options[ key ] = langx.mixin( {}, this.options[ key ] );\r\n                    for ( i = 0; i < parts.length - 1; i++ ) {\r\n                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\r\n                        curOption = curOption[ parts[ i ] ];\r\n                    }\r\n                    key = parts.pop();\r\n                    if ( arguments.length === 1 ) {\r\n                        return curOption[ key ] === undefined ? null : curOption[ key ];\r\n                    }\r\n                    curOption[ key ] = value;\r\n                } else {\r\n                    if ( arguments.length === 1 ) {\r\n                        return this.options[ key ] === undefined ? null : this.options[ key ];\r\n                    }\r\n                    options[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._setOptions( options );\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOptions: function( options ) {\r\n            var key;\r\n\r\n            for ( key in options ) {\r\n                this._setOption( key, options[ key ] );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOption: function( key, value ) {\r\n\r\n            this.options[ key ] = value;\r\n\r\n            return this;\r\n        }\r\n\r\n    });\r\n\r\n    $.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n    elmx.partial(\"plugin\",function(name,options) {\r\n        var args = slice.call( arguments, 1 );\r\n        return instantiate.apply(this,[this,name].concat(args));\r\n    }); \r\n\r\n\r\n    function plugins() {\r\n        return plugins;\r\n    }\r\n     \r\n    langx.mixin(plugins, {\r\n        instantiate : instantiate,\r\n    \t\r\n        Plugin : Plugin,\r\n\r\n        register : register\r\n\r\n    });\r\n\r\n    return plugins;\r\n});"]}