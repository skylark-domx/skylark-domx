{"version":3,"sources":["styler.js"],"names":["define","dom","langx","maybeAddPx","name","value","cssNumber","dasherize","classRE","classReCache","RegExp","className","node","klass","svg","undefined","baseVal","disabled","elm","arguments","length","this","defaultDisplay","nodeName","element","display","elementDisplay","document","createElement","body","appendChild","getComputedStyle","getPropertyValue","parentNode","removeChild","show","styler","css","isInvisible","hide","addClass","names","cls","isString","split","forEach","re","match","property","computedStyle","style","camelCase","isArrayLike","props","call","prop","removeProperty","key","cssText","hasClass","removeClass","replace","trim","toggleClass","when","self","Array","prototype","every","column-count","columns","font-weight","line-height","opacity","z-index","zoom","mixin","autocssfix","cssHooks"],"mappings":"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","file":"../styler.js","sourcesContent":["define([\r\n    \"./dom\",\r\n    \"./langx\"\r\n], function(dom, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getComputedStyle(element, '').getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getComputedStyle(elm, '')\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !self.hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                self.addClass(elm, klass);\r\n            } else {\r\n                self.removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return dom.styler = styler;\r\n});"]}